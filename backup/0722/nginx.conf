#教程 https://www.2cto.com/os/201212/176520.html
#定义Nginx运行的用户和用户组
#user root admin;

#nginx进程数，建议设置为等于CPU总核心数。
worker_processes  2;

#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  debug;

#进程文件
pid        logs/nginx.pid;

#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。

worker_rlimit_nofile 65535;

#工作模式与连接数上限
events {
#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。
#use epoll;
#单个进程最大连接数（最大连接数=连接数*进程数）
    worker_connections  65535;
}

#设定http服务器
http {

    upstream ups {
    #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。
    server 127.0.0.1:3000 weight=1;
#    server 127.0.0.1:8002 weight=2;
#    server 127.0.0.1:8003 weight=7;
    }


#日志格式设定
   access_log  logs/abc.access.log;
   error_log  logs/abc.error.log;

   #文件扩展名与文件类型映射表
   include mime.types;

   default_type application/octet-stream; #默认文件类型

   #charset utf-8; #默认编码

   #服务器名字的hash表大小
   server_names_hash_bucket_size 128;

   #上传文件大小限制
   client_header_buffer_size 32k;

   #设定请求缓
   large_client_header_buffers 4 64k;

   #设定请求缓
   client_max_body_size 256m;

   #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
   sendfile on;

   #开启目录列表访问，合适下载服务器，默认关闭。
   autoindex off;

   #防止网络阻塞
   tcp_nopush on;

   #防止网络阻塞
   tcp_nodelay on;

   #长连接超时时间，单位是秒
   keepalive_timeout 30;


#虚拟主机的配置
    server {
        #监听端口
        listen 80;
        #域名可以有多个，用空格隔开, 这里填写你的域名
        server_name  arc,abc,arc.com,abc.com,www.abc.com,www.arc.com;

        location / {
        proxy_pass http://ups;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;

        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        #以下是一些反向代理的配置，可选。
        proxy_set_header Host $host;
        client_max_body_size 10m; #允许客户端请求的最大单文件字节数
        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，
        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)
        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)
        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)
        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置
        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）
        proxy_temp_file_write_size 64k;#设定缓存文件夹大小，大于这个值，将从upstream服务器传
        }

        #设定查看Nginx状态的地址
        location /NginxStatus {
        stub_status on;
        access_log on;
        #auth_basic "NginxStatus";
        #auth_basic_user_file confpasswd;
        #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。

        }

    }


}
